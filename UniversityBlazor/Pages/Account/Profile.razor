@page "/profile"
@attribute [Authorize]
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject ProfileService profileService
@using System.Security.Claims
@using UniversityBlazor.Services

<h3>Мой профиль</h3>

@if (isLoading)
{
    <p>Загрузка данных...</p>
}
else if (profile == null)
{
    <p>Не удалось загрузить профиль</p>
}
else
{
    <EditForm Model="@profile" OnValidSubmit="@SaveProfile">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Name</label>
            <InputText @bind-Value="profile.Name" class="form-control" />
            <ValidationMessage For="@(() => profile.Name)" />
        </div>

        <div class="form-group">
            <label>Surname</label>
            <InputText @bind-Value="profile.Surname" class="form-control" />
            <ValidationMessage For="@(() => profile.Surname)" />
        </div>

        <div class="form-group">
            <label>Email:</label>
            <InputText @bind-Value="profile.Email" class="form-control" readonly />
        </div>

        <button type="submit" class="btn btn-primary">Сохранить</button>
        <button type="button" class="btn btn-secondary ml-2" @onclick="@Cancel">Отмена</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success mt-3">@successMessage</div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
}
@code {
    private UserProfile? profile = new();
    private bool isLoading = true;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (userId != null)
            {
                profile = await profileService.GetProfileAsync(userId);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Ошибка при загрузке профиля: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SaveProfile()
    {
        // try
        // {
        //     await ProfileService.UpdateUserProfileAsync(profile);
        //     successMessage = "Профиль успешно обновлен!";
        //     errorMessage = string.Empty;
        // }
        // catch (Exception ex)
        // {
        //     errorMessage = "Ошибка при сохранении: " + ex.Message;
        //     successMessage = string.Empty;
        // }
    }

    private void Cancel()
    {
        navigationManager.NavigateTo("/");
    }

    public class UserProfile
    {
        [Required]
        public string? Name { get; set; }
        [Required]
        public string? Surname { get; set; }
        [Required]
        public string? Email { get; set; }
        [Required]
        public string? ProfilePictureUrl { get; set; }

    }
}
