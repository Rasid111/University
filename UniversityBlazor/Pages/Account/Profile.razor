@page "/profile"
@attribute [Authorize]
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject ProfileService profileService
@using System.Security.Claims
@using UniversityBlazor.Services

@if (isLoading)
{
    <p>Loading...</p>
}
else if (profile == null)
{
    <p>Failed</p>
}
else
{
    <div class="container-fluid">
        <div class="row align-items-center justify-content-center text-center text-xl-start">
            <div class="col-12 col-xl-4">
                <div class="pfp-container d-inline-block">
                    <img src=@(String.IsNullOrEmpty(profile.ProfilePictureUrl) ? "/default_pfp.svg" : profile.ProfilePictureUrl) alt="pfp" />
                </div>
                <h1 class="d-inline-block">@profile.Name @profile.Surname</h1>
            </div>
            <div class="col-12 col-xl-4">
                <h3>Student</h3>
                <span>at group: <a href="/group/@profile.StudentProfile.Group.Id">@profile.StudentProfile.Group.Name</a></span>
                <br />
                <span>@profile.StudentProfile.Group.Faculty.Name</span>
            </div>
            <div class="col-12 col-xl-4 mt-3">
                <h3>@profile.TeacherProfile.Degree.Name</h3>
                <span>at @profile.TeacherProfile.Faculty.Name</span>
            </div>
        </div>
    </div>


    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success mt-3">@successMessage</div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
}
@code {
    private User? profile = new()
        {
            Name = "",
            Surname = "",
            Email = ""
        };

    private bool isLoading = true;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (userId != null)
            {
                profile = await profileService.GetProfileAsync(userId);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error while loading profile: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }
}
