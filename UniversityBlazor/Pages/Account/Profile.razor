@page "/profile"
@attribute [Authorize]
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject ProfileService profileService
@inject ILocalStorageService LocalStorage
@inject IHttpClientFactory HttpClientFactory
@using System.Security.Claims
@using UniversityBlazor.Services
@using UniversityBlazor.ViewModels
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Headers

@if (isLoading)
{
    <p>Loading...</p>
}
else if (profile == null)
{
    <p>Failed to load profile.</p>
}
else
{
    <div class="container mt-4 text-center">
        <img src="@((string.IsNullOrEmpty(profile.ProfilePictureUrl) ? "/default_pfp.svg" : profile.ProfilePictureUrl))"
             alt="pfp"
             class="rounded-circle border border-2"
             style="width: 150px; height: 150px; object-fit: cover;" />

        <h2 class="mt-3">@profile.Name @profile.Surname</h2>

        <div class="mt-4 text-start mx-auto" style="max-width: 400px;">
            @if (profile.StudentProfile is not null)
            {
                <p><strong>Group:</strong> @profile.StudentProfile.Group?.Name</p>
                <p><strong>Faculty:</strong> @profile.StudentProfile.Group?.Faculty?.Name</p>
            }

            @if (profile.TeacherProfile is not null)
            {
                <p><strong>Degree:</strong> @profile.TeacherProfile.Degree?.Name</p>
                <p><strong>Faculty:</strong> @profile.TeacherProfile.Faculty?.Name</p>
            }
        </div>

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success mt-3">@successMessage</div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">@errorMessage</div>
        }

        <!-- Account Actions -->
        <div class="mt-5">
            <h4>Account Settings</h4>

            <button class="btn btn-outline-secondary me-2" @onclick="OpenModal">Change Profile Picture</button>

            <button class="btn btn-outline-warning" @onclick="TogglePasswordChange">
                @(showPasswordForm ? "Cancel Password Change" : "Change Password")
            </button>

            @if (showPasswordForm)
            {
                <EditForm Model="passwordModel" OnValidSubmit="SubmitPasswordChange">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mt-3">
                        <label>Current Password</label>
                        <InputText class="form-control" type="@(showPasswords ? "text" : "password")" @bind-Value="passwordModel.CurrentPassword" />
                    </div>

                    <div class="mt-2">
                        <label>New Password</label>
                        <InputText class="form-control" type="@(showPasswords ? "text" : "password")" @bind-Value="passwordModel.NewPassword" />
                        <ValidationMessage For="@(() => passwordModel.NewPassword)" />
                    </div>

                    <div class="mt-2">
                        <label>Confirm New Password</label>
                        <InputText class="form-control" type="@(showPasswords ? "text" : "password")" @bind-Value="passwordModel.ConfirmPassword" />
                        <ValidationMessage For="@(() => passwordModel.ConfirmPassword)" />
                    </div>

                    <div class="mt-4 d-flex justify-content-center gap-3">
                        <button type="submit" class="btn btn-primary">Update Password</button>
                        <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility">
                            <i class="bi @(showPasswords ? "bi-eye-slash" : "bi-eye")"></i>
                        </button>
                    </div>
                </EditForm>

                @if (!string.IsNullOrEmpty(passwordMessage))
                {
                    <div class="alert mt-3 @(passwordMessage.Contains("success") ? "alert-success" : "alert-danger")">
                        @passwordMessage
                    </div>
                }
            }
        </div>
    </div>
}

<!-- PFP Modal -->
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Upload New Profile Picture</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <InputFile OnChange="OnFileSelected" />
                    @if (!string.IsNullOrEmpty(uploadMessage))
                    {
                        <div class="mt-3 alert @(uploadSuccess ? "alert-success" : "alert-danger")">
                            @uploadMessage
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button class="btn btn-outline-danger"
                            @onclick="ResetProfilePicture"
                            disabled="@string.IsNullOrEmpty(profile?.ProfilePictureUrl)">
                        Reset to Default
                    </button>
                    <button class="btn btn-primary" @onclick="UploadFile" disabled="@(selectedFile == null)">
                        Submit
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private User? profile = new()
    {
        Name = "",
        Surname = "",
        Email = ""
    };

    private bool isLoading = true;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;

    private bool showModal = false;
    private string uploadMessage = "";
    private bool uploadSuccess = false;
    private IBrowserFile? selectedFile = null;

    private bool showPasswordForm = false;
    private string passwordMessage = "";
    private bool showPasswords = false;

    private PasswordChangeModel passwordModel = new();

    public class PasswordChangeModel
    {
        [Required]
        public string CurrentPassword { get; set; } = "";

        [Required, MinLength(6)]
        public string NewPassword { get; set; } = "";

        [Compare(nameof(NewPassword), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = "";
    }

    private void TogglePasswordChange()
    {
        showPasswordForm = !showPasswordForm;
        passwordMessage = "";
    }

    private void TogglePasswordVisibility()
    {
        showPasswords = !showPasswords;
    }

    private async Task SubmitPasswordChange()
    {
        try
        {
            var jwt = await LocalStorage.GetItemAsStringAsync("jwt");
            var client = HttpClientFactory.CreateClient("UniversityBack");
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);

            var response = await client.PostAsJsonAsync("api/Account/ChangePassword", passwordModel);

            if (response.IsSuccessStatusCode)
            {
                passwordMessage = "Password changed successfully!";
                showPasswordForm = false;
                passwordModel = new();
            }
            else
            {
                passwordMessage = "Failed to change password.";
            }
        }
        catch (Exception ex)
        {
            passwordMessage = $"Error: {ex.Message}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (userId != null)
            {
                profile = await profileService.GetProfileAsync(userId);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error while loading profile: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OpenModal() => showModal = true;

    private void CloseModal()
    {
        showModal = false;
        uploadMessage = "";
        uploadSuccess = false;
        selectedFile = null;
    }

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        uploadMessage = "";
        uploadSuccess = false;
    }

    private async Task UploadFile()
    {
        if (selectedFile == null) return;

        try
        {
            var jwt = await LocalStorage.GetItemAsStringAsync("jwt");
            var client = HttpClientFactory.CreateClient("UniversityBack");
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);

            var content = new MultipartFormDataContent();
            var stream = selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            var fileContent = new StreamContent(stream);
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);

            content.Add(fileContent, "file", selectedFile.Name);

            var response = await client.PostAsync("api/Pfp/Upload", content);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<PfpUploadResult>();
                if (result?.ImageUrl is not null)
                {
                    profile!.ProfilePictureUrl = result.ImageUrl;
                    uploadMessage = "Profile picture updated successfully!";
                    uploadSuccess = true;
                    CloseModal();
                }
            }
            else
            {
                uploadMessage = "Failed to upload image.";
                uploadSuccess = false;
            }
        }
        catch (Exception ex)
        {
            uploadMessage = $"Error: {ex.Message}";
            uploadSuccess = false;
        }
    }

    private async Task ResetProfilePicture()
    {
        try
        {
            var jwt = await LocalStorage.GetItemAsStringAsync("jwt");
            var client = HttpClientFactory.CreateClient("UniversityBack");
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);

            var response = await client.DeleteAsync("api/Pfp/Delete");

            if (response.IsSuccessStatusCode)
            {
                profile!.ProfilePictureUrl = null;
                uploadMessage = "Profile picture has been reset.";
                uploadSuccess = true;
                CloseModal();
            }
            else
            {
                uploadMessage = "Failed to reset profile picture.";
                uploadSuccess = false;
            }
        }
        catch (Exception ex)
        {
            uploadMessage = $"Error resetting picture: {ex.Message}";
            uploadSuccess = false;
        }
    }

    public class PfpUploadResult
    {
        public string ImageUrl { get; set; } = "";
    }
}